#!/bin/bash
### BEGIN INIT INFO
# Provides:          logstash
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start logstash at boot time
# Description:       Enable logstash
### END INIT INFO

# Logstash server init-script.
# Made for and tested on Debian Wheezy with Logstash 1.4.0
# 
# Author: Stefan Midjich <swehack@gmail.com>

# This is where you unpacked logstash to
# WARNING: You need to remove the first line from $basedir/bin/logstash.lib.sh that says 
#  basedir=$(cd `dirname $0`/..; pwd)
# Or this won't work. 
export basedir='/home/logstash/logstash'
configFile="$basedir/logstash.conf"
program="$basedir/lib/logstash/runner.rb"

### READ ALL THE COMMENTS DOWN TO HERE BEFORE ATTEMPTING SCIENCE ###

# Defaults you can override with environment variables
LS_HEAP_SIZE="${LS_HEAP_SIZE:=800m}"

unset CDPATH

# Setup logstash environment
. ${basedir}/bin/logstash.lib.sh
setup

# Export these so that they can be picked up by file input (and others?).
export HOME SINCEDB_DIR

DESC='Log and event manager'
NAME=logstash
DAEMON="${RUBYCMD%% *}"
DAEMON_ARGS="${RUBYCMD##*$DAEMON } -I$RUBYLIB $program agent -f $configFile" # By default start agent mode
PIDFILE="$basedir/logstash.pid"
SCRIPTNAME=/etc/init.d/logstash
USER=logstash
GROUP=logstash

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

do_start () {
  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -c "$USER" -g "$GROUP" --test \
    > /dev/null || return 1

  start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -b -c "$USER" -g "$GROUP" \
    -- $DAEMON_ARGS \
    || return 2
}

do_stop () {
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
  RETVAL=$?
  [ "$RETVAL" = 2 ] && return 2

  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
  [ "$?" = 2 ] && return 2
  rm -f "$PIDFILE"
  return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    log_daemon_msg "Reloading $DESC" "$NAME"
    do_stop
    do_start
    log_end_msg $?
    ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
	;;
esac

:
